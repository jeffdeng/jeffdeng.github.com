---
layout: post
title:  "事务的一点分析"
date:   2015-10-25 12:00:00
categories:  🐘php

---

* content
{:toc}


##序
在一家P2P的公司，后发现在比较核心的数据处理上，一点事务也没用，促使我研究了下在实际开发中某些公司为啥不敢用事务。


##什么事务
    事务（Transaction）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。例如，银行转账工作：从一个账号扣款并使另一个账号增款，这两个操作要么都执行，要么都不执行。所以，应该把它们看成一个事务。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性
 
    在SQL语言中,定义事务的语句有三条： 
    BEGIN TRANSACTION 
    COMMIT 
    ROLLBACK
    
上面这句话是我复制过来的，大概就是这个意思。在处理钱和库存方面，假如不用事务会很坑，用户的钱被扣成负数，库存超卖都会发生。还没有发生的，那是短时间内你的并发量还不够大。

##事务代码的使用方式
      
        code 改天上代码
       

##为什么不敢用事务
 自从发现某P2P公司处理核心的问题上没有用事务后，我还到某群问了下，发现有的商城网站也不敢用，原因：**怕死锁**。
 
  事务会在BEGIN的时候把下面要操作的到表都加把锁，这样别人就无法读写这些表，而其往往操作的不是一张表，而是大于5张以上的表，还有一些其他操作，中间处理过程也很耗时间，大于1秒是很正常的。那么问题就来了，A用户锁住了1表，B用户锁住了2表，然后整个过程需要1 2 表才能完成，结果就是A B都在耗，锁死了。
  
  上面这张情况在高并发的时候就是灾难性的的问题了，写并发完全上不去。OK,那还不如把事务去掉呢，毕竟超扣，超卖几率远远小于锁死的。好，就这么干了...不过后来就呵呵了，发现某天推广力度大，订单数据有些对不上了。
  
  后来有人想到了用一个针对商品的独占锁的东西，要是你重复提交了，不让你第二次提交了，可以解决一个人重复下2个单的问题。其实这个可以用流水单号搞定。

##如何防止事务造成的死锁
死锁是由于短时间内高并发造成的，N多进程在抢资源，结果资源被大家一人分了一点，每个人没有完整的资源又没办法进行下去。

那么如何让解决呢，互联网解决方案的基本思路就是大的化为小的，小的直接解决，让最后的逻辑直接处理最简单的情况。什么是最简单的情况，那就是没有人和我抢资源，大家都是非常有礼貌的完成整个事务，如何做到？参考上班挤地铁，爬车顶是不行的，你得排队(Quene)！

队列（Quene）的方式几乎是现在此类的通用解决方案了，感受最深的应该是12306了吧，一开始很坑爹的前端去排队，后来优化到后端排队抢票。
至于如何写这个队列的模型细节，下一篇再讲。
  