---
layout: post
title:  "面向对象编程进阶第一步"
date:   2015-09-30 12:00:00
categories:  🐘php

---

* content
{:toc}

![cxy.png](/static/img/cxy.png)

##序
> * 代码编写的2个的层次
> * 面向对象的语言写着面向过程的代码

代码编写有2个大的层次，一个是面向过程编程，一个是面向对象编程。二者不是泾渭分明的分开的，前者是后者的基础。
大学里面学的C，是面向过程编程语言;而JAVA C#是面向对象编程的语言。
这里只是说JAVA是面向对象的语言，而不是说用了JAVA就是面向对象编程了。为什么呢，**因为多数人还用着面向对象的语言写着面向过程的代码**。

##什么是面向对象编程

###先说说面向过程。
面向过程是一个业务逻辑写一坨，然后下次其他地方要用到的时候：要么复制这一坨过去，成了2到N份了；要么inlude过去，然后到最后一个file包含了N多公用function，打包分类file最后又发现funcion名字冲突，五花八门的命名。

###面向对象编程
面向对象编程就是把事物的属性和行为抽象出来，封装为一个可以继承和复用的独立对象。如何抽象和组织这个对象或者类，就成了关键，于是就有了设计模式这种东西。
一个框架设计的好不好，就看设计模式用的如何。一般一个框架就用到了不到10种设计模式，不是说用的越多越棒，而是做好模块的**高内聚低耦合**。这个一般都不用码农去关心，具体到用框架的时候，要有**面向对象的思维和习惯**，这才是重要的。

但是这个东西也不是一朝一夕能炼成的，需要的内炼的东西很多。

###现状
>1.缺少面向过程的锻炼，假如面向过程的功能都不会写，想写出面向对象的代码无异于空中楼阁，要想做一个功能，首先得明白怎么做，知道它的原理。

>2.缺少丰富的项目实践 只有丰富的项目实践才能让你接触到各种现实中的需求，从实际中体认到面向对象的效率：在多人合作中的效率，在需求反复修改中的效率，在代码可读性上的效率。

>3.缺少面向对象的思维转变 

所以刚刚毕业就说自己会面向对象编程，我是不信的，就和小孩一样还没学会爬就想站起来跑，工作好几年都不一定有这个思维。

##面向对象的好处

面向对象的好处只有在多人合作的中大型项目上才能很明显的看出来，搞个企业站就算了，杀鸡不用牛刀。

>1.模块分工明确，各干各的，不容易冲突，最后提交代码到svn或者git上完事。

>2.维护成本低，搭积木一样写一个大工程 需求反复变更的时候，只有找到和业务相关的那个private function改改就行了，不会出现牵一发动全身的场面。

>3.架构上换底层的时候，只要接口部分不变，底层diver这些顺便搞，不用全部换血把业务层也搞一遍。

>4.代码逻辑清晰，避免了一个大funcion几百行以上代码，头都看晕了，接手的人要改这个东西，全部通读一遍才能明白上一个人大概写了个啥。要是分开写，抽出来，只要找到和这个业务相关的funcion部分改改，牵涉不到，改起来出错概率小很多。

##面向对象的坏处

>1.学习成本高。比如要明白为什么好好的一个登陆，为啥写这的这么绕，比如YII和laravel的登陆验证，就需要设计模式的相关知识才能知道。

>2.运行速度低，要比一个页面的运行速度，面向对象比面向过程差了好几个等级，毕竟封装的太狠

##如何学习面向对象编程思想和能力

 对于一个刚刚学会语法的人，可以先学会写各种功能，登陆，分页，留言板cookie原理之类的，明白为什么这么写。
  然后看看框架源代码类的或者有优秀的项目源代码更好，实践才是王道。这时候是补充几种常用的设计模式，比如工厂模式，单例模式，外观模式，IOC这些。
  最后就是实践，再实践，学着把自己的业务逻辑抽象出来，不要写成一坨，想想你改别人面向过程代码的心情。
  
  本来想抽几段项目代码来当当反面教材的，算了。
  总之，学无止境。




